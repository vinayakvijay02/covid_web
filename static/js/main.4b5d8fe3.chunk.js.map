{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","active","isRed","cases","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","Map","center","zoom","countries","casesType","id","TileLayer","attribution","url","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setmapCenter","mapZoom","setmapZoom","mapCountries","setmapCountries","setCasesType","name","iso2","getCOuntriesData","onCountryChange","event","countryCode","target","FormControl","Select","Variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kWAGe,SAASA,EAAT,GAOX,IANFC,EAMC,EANDA,MACAC,EAKC,EALDA,OACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,MACGC,EACF,0DACD,OACE,kBAACC,EAAA,EAAD,CACEC,UAAS,kBAAaN,GAAU,oBAAvB,YACPC,GAAS,gBAEXM,QAASH,EAAMG,SAEf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBJ,UAAU,iBACzCP,GAEH,wBAAIO,UAAS,0BAAqBL,GAAS,0BACxCC,GAEH,kBAACO,EAAA,EAAD,CAAYC,MAAM,gBAAgBJ,UAAU,iBACzCH,EADH,Y,0ECrBFQ,EAAkB,CACtBT,MAAO,CACLU,IAAK,UAELC,WAAY,KAEdC,UAAW,CACTF,IAAK,UAELC,WAAY,MAEdE,OAAQ,CACNH,IAAK,UAELC,WAAY,MAIHG,EAAkB,SAAAC,GAAI,OACjCA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAEjCC,EAAW,SAAAC,GACtB,IAAMC,EAAU,YAAOD,GAQvB,OAPAC,EAAWC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAEtB,MAAQuB,EAAEvB,OACN,EAED,KAGJoB,GC9BM,SAASI,EAAT,GAAsD,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UACrD,OACE,yBAAKC,GAAG,OACN,6BACE,kBAAC,IAAD,CAAYJ,OAAQA,EAAQC,KAAMA,GAChC,kBAACI,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,6CDyBa,SAACb,GAAD,IAAOS,EAAP,uDAAmB,QAAnB,OAC3BT,EAAKc,KAAI,SAAAC,GAAO,OACd,kBAACC,EAAA,EAAD,CACEV,OAAQ,CAACS,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACtDC,YAAa,GACb/B,MAAOC,EAAgBmB,GAAWlB,IAClC8B,UAAW/B,EAAgBmB,GAAWlB,IACtC+B,OACEC,KAAKC,KAAKT,EAAQN,IAAcnB,EAAgBmB,GAAWjB,YAG7D,kBAACiC,EAAA,EAAD,KACE,yBAAKxC,UAAU,kBACb,yBACEA,UAAU,YACVyC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QAE1B,yBAAK3C,UAAU,aAAa8B,EAAQA,SACpC,yBAAK9B,UAAU,kBAAf,SACSY,IAAQkB,EAAQlC,OAAOiB,OAAO,QAEvC,yBAAKb,UAAU,kBAAf,aACaY,IAAQkB,EAAQlC,OAAOiB,OAAO,QAE3C,yBAAKb,UAAU,eAAf,UACUY,IAAQkB,EAAQlC,OAAOiB,OAAO,cChDvC+B,CAAcrB,EAAWC,M,OCMrBqB,MAff,YAA+B,IAAdtB,EAAa,EAAbA,UACf,OACE,yBAAKvB,UAAU,SACZuB,EAAUM,KAAI,gBAAGC,EAAH,EAAGA,QAASlC,EAAZ,EAAYA,MAAZ,OACb,4BACE,4BAAKkC,GAEL,4BACE,gCAASlB,IAAQhB,GAAOiB,OAAO,e,QCTrCiC,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLb,OAAQ,IAGZc,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa1C,GAC5B,OAAOH,IAAQ6C,EAAYC,OAAO7C,OAAO,WAI/C8C,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJjD,OAAQ,WACRkD,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CACLC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAOzD,IAAQ8C,GAAO7C,OAAO,YAQnCyD,EAAiB,SAACvD,EAAMS,GAC5B,IACI+C,EADAC,EAAY,GAEhB,IAAK,IAAIC,KAAQ1D,EAAKnB,MAAO,CAC3B,GAAI2E,EAAe,CACjB,IAAIG,EAAe,CACjBC,EAAGF,EACHG,EAAG7D,EAAKS,GAAWiD,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgBxD,EAAKS,GAAWiD,GAElC,OAAOD,GAEM,SAASM,EAAT,GAAuD,IAAD,IAAjCtD,iBAAiC,MAArB,QAAqB,EAAT1B,EAAS,+BAC3CiF,mBAAS,IADkC,mBAC5DhE,EAD4D,KACtDiE,EADsD,KAiBnE,OAdAC,qBAAU,YACO,uCAAG,sBAAA/D,EAAA,sEACVgE,MAAM,8DACTC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAApE,GACJ,IAAIyD,EAAYF,EAAevD,EAAMS,GACrCwD,EAAQR,MAPI,2CAAH,qDAUfc,KACC,CAAC9D,IAGF,yBAAKxB,UAAWF,EAAME,YACf,OAAJe,QAAI,IAAJA,OAAA,EAAAA,EAAMwE,QAAS,GACd,kBAAC,OAAD,CACEzC,QAASA,EACT/B,KAAM,CACJyE,SAAU,CACR,CACEC,gBAAiB,sBACjBC,YAAa,UACb3E,KAAMA,Q,OC8CP4E,MAvHf,WAAgB,IAAD,EACqBZ,mBAAS,IAD9B,mBACNxD,EADM,KACKqE,EADL,OAEiBb,mBAAS,aAF1B,mBAENjD,EAFM,KAEG+D,EAFH,OAGyBd,mBAAS,IAHlC,mBAGN/C,EAHM,KAGO8D,EAHP,OAIqBf,mBAAS,IAJ9B,mBAINgB,EAJM,KAIKC,EAJL,OAKqBjB,mBAAS,CAAE9C,IAAK,SAAUgE,KAAM,UALrD,mBAKNC,EALM,KAKKC,EALL,OAMiBpB,mBAAS,GAN1B,mBAMNqB,EANM,KAMGC,EANH,OAO2BtB,mBAAS,IAPpC,mBAONuB,EAPM,KAOQC,EAPR,OAQqBxB,mBAAS,SAR9B,mBAQNvD,EARM,KAQKgF,EARL,KAUbvB,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApE,GACJ+E,EAAe/E,QAElB,IACHkE,qBAAU,YACc,uCAAG,sBAAA/D,EAAA,sEACjBgE,MAAM,4CACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApE,GACJ,IAAMQ,EAAYR,EAAKc,KAAI,SAAAC,GAAO,MAAK,CACrC2E,KAAM3E,EAAQA,QACd4B,MAAO5B,EAAQE,YAAY0E,SAEvB1F,EAAaF,EAASC,GAC5BiF,EAAahF,GACbuF,EAAgBxF,GAChB6E,EAAarE,MAXM,2CAAH,qDActBoF,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAMC,GAAN,iBAAA3F,EAAA,6DAChB4F,EAAcD,EAAME,OAAOrD,MACjCmC,EAAWiB,GACLlF,EACY,cAAhBkF,EACI,qCADJ,mDAEgDA,GAN5B,SAOhB5B,MAAMtD,GACTuD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApE,GACJ8E,EAAWiB,GACXhB,EAAe/E,GACiB,qBAArBA,EAAKiB,aACdmE,EAAa,CAACpF,EAAKiB,YAAYC,IAAKlB,EAAKiB,YAAYE,OACrDmE,EAAW,KAEXF,EAAa,CAAElE,IAAK,SAAUgE,KAAM,UACpCI,EAAW,OAjBK,2CAAH,sDAqBrB,OACE,yBAAKrG,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,kDACA,kBAACgH,EAAA,EAAD,CAAahH,UAAU,gBACrB,kBAACiH,EAAA,EAAD,CACEC,QAAQ,WACRxD,MAAO5B,EACPqF,SAAUP,GAEV,kBAACQ,EAAA,EAAD,CAAU1D,MAAM,aAAhB,aAECnC,EAAUM,KAAI,SAAAC,GAAO,OACpB,kBAACsF,EAAA,EAAD,CAAU1D,MAAO5B,EAAQ4B,OAAQ5B,EAAQ2E,YAKjD,yBAAKzG,UAAU,aACb,kBAAC,EAAD,CACEL,OAAK,EACLD,OAAsB,UAAd8B,EACRvB,QAAS,SAAAoH,GAAC,OAAIb,EAAa,UAC3B/G,MAAM,oBACNG,MAAOc,EAAgBsB,EAAYsF,YACnCzH,MAAOa,EAAgBsB,EAAYpC,SAErC,kBAAC,EAAD,CACEF,OAAsB,cAAd8B,EACRvB,QAAS,SAAAoH,GAAC,OAAIb,EAAa,cAC3B/G,MAAM,YACNG,MAAOc,EAAgBsB,EAAYuF,gBACnC1H,MAAOa,EAAgBsB,EAAYxB,aAErC,kBAAC,EAAD,CACEb,OAAK,EACLD,OAAsB,WAAd8B,EACRvB,QAAS,SAAAoH,GAAC,OAAIb,EAAa,WAC3B/G,MAAM,SACNG,MAAOc,EAAgBsB,EAAYwF,aACnC3H,MAAOa,EAAgBsB,EAAYvB,WAGvC,kBAAC,EAAD,CACEe,UAAWA,EACXH,OAAQ6E,EACR5E,KAAM8E,EACN7E,UAAW+E,KAGf,kBAACvG,EAAA,EAAD,CAAMC,UAAU,aACd,kBAACE,EAAA,EAAD,KACE,qDACA,kBAAC,EAAD,CAAOqB,UAAWwE,IAClB,wBAAI/F,UAAU,kBAAd,iBAA8CwB,GAC9C,kBAACsD,EAAD,CAAW9E,UAAU,YAAYwB,UAAWA,QCpHlCiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4b5d8fe3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nexport default function InfoBox({\r\n  title,\r\n  active,\r\n  isRed,\r\n  cases,\r\n  total,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"infoBox_title\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography color=\"textSecondary\" className=\"infoBox_total\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = stat =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = data => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map(country => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases:{numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered:{numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths:{numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, Marker, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\nexport default function Map({ center, zoom, countries, casesType }) {\r\n  return (\r\n    <div id=\"map\">\r\n      <div>\r\n        <LeafletMap center={center} zoom={zoom}>\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {showDataOnMap(countries, casesType)}\r\n        </LeafletMap>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\nexport default function LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfroBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport { sortData } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat } from \"./util\";\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setmapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setmapZoom] = useState(2);\n  const [mapCountries, setmapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n  useEffect(() => {\n    const getCOuntriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setmapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCOuntriesData();\n  }, []);\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (typeof data.countryInfo !== \"undefined\") {\n          setmapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setmapZoom(4);\n        } else {\n          setmapCenter({ lat: 34.80746, lng: -40.4796 });\n          setmapZoom(2);\n        }\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID - 19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              Variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfroBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfroBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfroBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app_graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}